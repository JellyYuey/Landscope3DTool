{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\21064\\\\Desktop\\\\frontend\\\\src\\\\ThreeScene.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // 创建场景\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xa0a0a0);\n\n    // 创建相机\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(10, 10, 20);\n\n    // 创建渲染器\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n\n    // 将渲染器挂载到 DOM\n    mountRef.current.appendChild(renderer.domElement);\n\n    // 添加轨道控制器\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.target.set(0, 0, 0);\n    controls.update();\n\n    // 添加光源\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(10, 20, 10);\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n\n    // 创建地面\n    const planeGeometry = new THREE.PlaneGeometry(100, 100);\n    const planeMaterial = new THREE.MeshStandardMaterial({\n      color: 0x808080\n    });\n    const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n    plane.rotation.x = -Math.PI / 2;\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    // 添加一个简单的树模型\n    const treeTrunkGeometry = new THREE.CylinderGeometry(0.5, 0.5, 5, 32);\n    const treeTrunkMaterial = new THREE.MeshStandardMaterial({\n      color: 0x8b4513\n    });\n    const treeTrunk = new THREE.Mesh(treeTrunkGeometry, treeTrunkMaterial);\n    treeTrunk.position.set(0, 2.5, 0);\n    treeTrunk.castShadow = true;\n    scene.add(treeTrunk);\n    const treeLeavesGeometry = new THREE.SphereGeometry(3, 32, 32);\n    const treeLeavesMaterial = new THREE.MeshStandardMaterial({\n      color: 0x228b22\n    });\n    const treeLeaves = new THREE.Mesh(treeLeavesGeometry, treeLeavesMaterial);\n    treeLeaves.position.set(0, 6, 0);\n    treeLeaves.castShadow = true;\n    scene.add(treeLeaves);\n\n    // 渲染循环\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // 清理渲染器\n    return () => {\n      renderer.dispose();\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: \"100%\",\n      height: \"100vh\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 10\n  }, this);\n};\n_s(ThreeScene, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","jsxDEV","_jsxDEV","ThreeScene","_s","mountRef","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","current","appendChild","domElement","controls","target","update","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","castShadow","planeGeometry","PlaneGeometry","planeMaterial","MeshStandardMaterial","color","plane","Mesh","rotation","x","Math","PI","receiveShadow","treeTrunkGeometry","CylinderGeometry","treeTrunkMaterial","treeTrunk","treeLeavesGeometry","SphereGeometry","treeLeavesMaterial","treeLeaves","animate","requestAnimationFrame","render","dispose","removeChild","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/21064/Desktop/frontend/src/ThreeScene.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\n\r\nconst ThreeScene = () => {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // 创建场景\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xa0a0a0);\r\n\r\n    // 创建相机\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    camera.position.set(10, 10, 20);\r\n\r\n    // 创建渲染器\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.shadowMap.enabled = true;\r\n\r\n    // 将渲染器挂载到 DOM\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    // 添加轨道控制器\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.target.set(0, 0, 0);\r\n    controls.update();\r\n\r\n    // 添加光源\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(10, 20, 10);\r\n    directionalLight.castShadow = true;\r\n    scene.add(directionalLight);\r\n\r\n    // 创建地面\r\n    const planeGeometry = new THREE.PlaneGeometry(100, 100);\r\n    const planeMaterial = new THREE.MeshStandardMaterial({ color: 0x808080 });\r\n    const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n    plane.rotation.x = -Math.PI / 2;\r\n    plane.receiveShadow = true;\r\n    scene.add(plane);\r\n\r\n    // 添加一个简单的树模型\r\n    const treeTrunkGeometry = new THREE.CylinderGeometry(0.5, 0.5, 5, 32);\r\n    const treeTrunkMaterial = new THREE.MeshStandardMaterial({ color: 0x8b4513 });\r\n    const treeTrunk = new THREE.Mesh(treeTrunkGeometry, treeTrunkMaterial);\r\n    treeTrunk.position.set(0, 2.5, 0);\r\n    treeTrunk.castShadow = true;\r\n    scene.add(treeTrunk);\r\n\r\n    const treeLeavesGeometry = new THREE.SphereGeometry(3, 32, 32);\r\n    const treeLeavesMaterial = new THREE.MeshStandardMaterial({ color: 0x228b22 });\r\n    const treeLeaves = new THREE.Mesh(treeLeavesGeometry, treeLeavesMaterial);\r\n    treeLeaves.position.set(0, 6, 0);\r\n    treeLeaves.castShadow = true;\r\n    scene.add(treeLeaves);\r\n\r\n    // 渲染循环\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    // 清理渲染器\r\n    return () => {\r\n      renderer.dispose();\r\n      mountRef.current.removeChild(renderer.domElement);\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={mountRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n};\r\n\r\nexport default ThreeScene;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,8CAA8C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7E,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE7BC,SAAS,CAAC,MAAM;IACd;IACA,MAAMQ,KAAK,GAAG,IAAIP,KAAK,CAACQ,KAAK,CAAC,CAAC;IAC/BD,KAAK,CAACE,UAAU,GAAG,IAAIT,KAAK,CAACU,KAAK,CAAC,QAAQ,CAAC;;IAE5C;IACA,MAAMC,MAAM,GAAG,IAAIX,KAAK,CAACY,iBAAiB,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC;IACjGJ,MAAM,CAACK,QAAQ,CAACC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;;IAE/B;IACA,MAAMC,QAAQ,GAAG,IAAIlB,KAAK,CAACmB,aAAa,CAAC;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IAC7DF,QAAQ,CAACG,OAAO,CAACR,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDG,QAAQ,CAACI,SAAS,CAACC,OAAO,GAAG,IAAI;;IAEjC;IACAjB,QAAQ,CAACkB,OAAO,CAACC,WAAW,CAACP,QAAQ,CAACQ,UAAU,CAAC;;IAEjD;IACA,MAAMC,QAAQ,GAAG,IAAI1B,aAAa,CAACU,MAAM,EAAEO,QAAQ,CAACQ,UAAU,CAAC;IAC/DC,QAAQ,CAACC,MAAM,CAACX,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC5BU,QAAQ,CAACE,MAAM,CAAC,CAAC;;IAEjB;IACA,MAAMC,YAAY,GAAG,IAAI9B,KAAK,CAAC+B,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC;IAC1DxB,KAAK,CAACyB,GAAG,CAACF,YAAY,CAAC;IAEvB,MAAMG,gBAAgB,GAAG,IAAIjC,KAAK,CAACkC,gBAAgB,CAAC,QAAQ,EAAE,GAAG,CAAC;IAClED,gBAAgB,CAACjB,QAAQ,CAACC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACzCgB,gBAAgB,CAACE,UAAU,GAAG,IAAI;IAClC5B,KAAK,CAACyB,GAAG,CAACC,gBAAgB,CAAC;;IAE3B;IACA,MAAMG,aAAa,GAAG,IAAIpC,KAAK,CAACqC,aAAa,CAAC,GAAG,EAAE,GAAG,CAAC;IACvD,MAAMC,aAAa,GAAG,IAAItC,KAAK,CAACuC,oBAAoB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IACzE,MAAMC,KAAK,GAAG,IAAIzC,KAAK,CAAC0C,IAAI,CAACN,aAAa,EAAEE,aAAa,CAAC;IAC1DG,KAAK,CAACE,QAAQ,CAACC,CAAC,GAAG,CAACC,IAAI,CAACC,EAAE,GAAG,CAAC;IAC/BL,KAAK,CAACM,aAAa,GAAG,IAAI;IAC1BxC,KAAK,CAACyB,GAAG,CAACS,KAAK,CAAC;;IAEhB;IACA,MAAMO,iBAAiB,GAAG,IAAIhD,KAAK,CAACiD,gBAAgB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;IACrE,MAAMC,iBAAiB,GAAG,IAAIlD,KAAK,CAACuC,oBAAoB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IAC7E,MAAMW,SAAS,GAAG,IAAInD,KAAK,CAAC0C,IAAI,CAACM,iBAAiB,EAAEE,iBAAiB,CAAC;IACtEC,SAAS,CAACnC,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IACjCkC,SAAS,CAAChB,UAAU,GAAG,IAAI;IAC3B5B,KAAK,CAACyB,GAAG,CAACmB,SAAS,CAAC;IAEpB,MAAMC,kBAAkB,GAAG,IAAIpD,KAAK,CAACqD,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IAC9D,MAAMC,kBAAkB,GAAG,IAAItD,KAAK,CAACuC,oBAAoB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IAC9E,MAAMe,UAAU,GAAG,IAAIvD,KAAK,CAAC0C,IAAI,CAACU,kBAAkB,EAAEE,kBAAkB,CAAC;IACzEC,UAAU,CAACvC,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAChCsC,UAAU,CAACpB,UAAU,GAAG,IAAI;IAC5B5B,KAAK,CAACyB,GAAG,CAACuB,UAAU,CAAC;;IAErB;IACA,MAAMC,OAAO,GAAGA,CAAA,KAAM;MACpBC,qBAAqB,CAACD,OAAO,CAAC;MAC9B7B,QAAQ,CAACE,MAAM,CAAC,CAAC;MACjBX,QAAQ,CAACwC,MAAM,CAACnD,KAAK,EAAEI,MAAM,CAAC;IAChC,CAAC;IACD6C,OAAO,CAAC,CAAC;;IAET;IACA,OAAO,MAAM;MACXtC,QAAQ,CAACyC,OAAO,CAAC,CAAC;MAClBrD,QAAQ,CAACkB,OAAO,CAACoC,WAAW,CAAC1C,QAAQ,CAACQ,UAAU,CAAC;IACnD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOvB,OAAA;IAAK0D,GAAG,EAAEvD,QAAS;IAACwD,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC1E,CAAC;AAAC/D,EAAA,CAzEID,UAAU;AAAAiE,EAAA,GAAVjE,UAAU;AA2EhB,eAAeA,UAAU;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}