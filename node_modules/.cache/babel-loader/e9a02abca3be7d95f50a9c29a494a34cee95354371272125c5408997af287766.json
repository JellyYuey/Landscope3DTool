{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\21064\\\\Desktop\\\\frontend\\\\src\\\\ThreeScene.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { CSM } from \"three/examples/jsm/csm/CSM.js\";\nimport { CSMHelper } from \"three/examples/jsm/csm/CSMHelper.js\";\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min.js\";\nimport { TreeBuilder } from \"./TreeBuilder\"; // 替换为你的 TreeBuilder 路径\nimport { CustomizeTree } from \"./CustomizeTree\"; // 替换为你的 CustomizeTree 路径\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // 初始化场景\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xffffff);\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\n    camera.position.set(30, 50, 50); // 修改相机位置\n    camera.lookAt(new THREE.Vector3(0, 0, 0)); // 确保相机对准中心\n\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    mountRef.current.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.target.set(0, 10, 0);\n    controls.update();\n\n    // 添加环境光\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(-10, 20, -10); // 设置更高或更正方向的光源\n    scene.add(directionalLight);\n\n    // 添加层次阴影映射\n    const csm = new CSM({\n      maxFar: 1000,\n      cascades: 4,\n      mode: \"practical\",\n      parent: scene,\n      shadowMapSize: 2048,\n      lightDirection: new THREE.Vector3(-1, -1, -1).normalize(),\n      lightColor: new THREE.Color(0x000020),\n      lightIntensity: 0.5,\n      camera\n    });\n\n    // 添加平面\n    const planeGeometry = new THREE.PlaneGeometry(50, 50, 10, 10);\n    planeGeometry.rotateX(-Math.PI / 2);\n    const planeMaterial = new THREE.MeshPhongMaterial({\n      color: \"white\",\n      side: THREE.DoubleSide\n    });\n    const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n    csm.setupMaterial(planeMaterial);\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    // 创建树木\n    const builder = new TreeBuilder();\n    const customizeTree = new CustomizeTree();\n    let treeObj = customizeTree.getTree(\"普通乔木\");\n    builder.init(treeObj, true, \"y-axis\");\n    const skeleton = builder.buildSkeleton();\n    const singleTree = builder.buildTree(skeleton);\n    singleTree.children.forEach(child => {\n      child.castShadow = true;\n    });\n    // 构建树木并为其添加阴影\n    let lod1;\n    singleTree.children.forEach(child => {\n      child.castShadow = true; // 使每个树木部分都投射阴影\n    });\n    scene.add(singleTree); // 将树木添加到场景中\n\n    // 将树木构建的函数封装\n    function buildtree(species) {\n      scene.remove(singleTree);\n      scene.remove(lod1);\n      builder.clearMesh(); // 清空之前的网格\n      treeObj = customizeTree.getTree(species);\n      builder.init(treeObj, true);\n      skeleton = builder.buildSkeleton();\n      singleTree = builder.buildTree(skeleton);\n      singleTree.children.forEach(child => {\n        child.castShadow = true; // 使每个树木部分都投射阴影\n      });\n      scene.add(singleTree); // 将新的树木添加到场景中\n\n      console.log(\"singleTree\", singleTree);\n\n      // 加载纹理并为树木创建叶子\n      let loader = new THREE.TextureLoader();\n      console.log(\"Texture path:\", `${treeObj.path}texture.png`);\n      let texture1 = loader.load(`${treeObj.path}texture.png`, () => {\n        console.log(\"Texture loaded:\", texture1);\n        console.log(\"Texture alpha values:\", texture1.image);\n      }, undefined, error => {\n        console.error(\"Error loading texture:\", error);\n      });\n      texture1.colorSpace = THREE.SRGBColorSpace;\n      // 打印纹理对象\n      console.log(\"Texture:\", texture1);\n      let geometry = new LeafGeometry(\"cross\", 10, 10).generate(); // 生成叶子的几何体\n      // 打印几何体对象\n      console.log(\"Geometry:\", geometry);\n\n      // 创建材质\n      let material = new THREE.MeshBasicMaterial({\n        map: texture1,\n        // 纹理贴图\n        side: THREE.DoubleSide,\n        // 两面显示\n        alphaTest: 0.5 // 透明度测试\n      });\n      // 打印材质对象\n      console.log(\"Material:\", material);\n      lod1 = new THREE.Mesh(geometry, material);\n      lod1.position.set(20, 0, 0); // 设置叶子位置\n      lod1.castShadow = true; // 使叶子也投射阴影\n      scene.add(lod1); // 将叶子添加到场景中\n      // 打印创建的 Mesh 对象\n      console.log(\"Leaf Mesh:\", lod1);\n    }\n    scene.add(singleTree);\n\n    // 动画循环\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      csm.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // 清理函数\n    return () => {\n      renderer.dispose();\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: \"100%\",\n      height: \"100vh\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 10\n  }, this);\n};\n_s(ThreeScene, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","CSM","CSMHelper","GUI","TreeBuilder","CustomizeTree","jsxDEV","_jsxDEV","ThreeScene","_s","mountRef","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","lookAt","Vector3","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","current","appendChild","domElement","controls","target","update","directionalLight","DirectionalLight","add","csm","maxFar","cascades","mode","parent","shadowMapSize","lightDirection","normalize","lightColor","lightIntensity","planeGeometry","PlaneGeometry","rotateX","Math","PI","planeMaterial","MeshPhongMaterial","color","side","DoubleSide","plane","Mesh","setupMaterial","receiveShadow","builder","customizeTree","treeObj","getTree","init","skeleton","buildSkeleton","singleTree","buildTree","children","forEach","child","castShadow","lod1","buildtree","species","remove","clearMesh","console","log","loader","TextureLoader","path","texture1","load","image","undefined","error","colorSpace","SRGBColorSpace","geometry","LeafGeometry","generate","material","MeshBasicMaterial","map","alphaTest","animate","requestAnimationFrame","render","dispose","removeChild","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/21064/Desktop/frontend/src/ThreeScene.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\nimport { CSM } from \"three/examples/jsm/csm/CSM.js\";\r\nimport { CSMHelper } from \"three/examples/jsm/csm/CSMHelper.js\";\r\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min.js\";\r\nimport { TreeBuilder } from \"./TreeBuilder\"; // 替换为你的 TreeBuilder 路径\r\nimport { CustomizeTree } from \"./CustomizeTree\"; // 替换为你的 CustomizeTree 路径\r\n\r\nconst ThreeScene = () => {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // 初始化场景\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xffffff);\r\n\r\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\r\n    camera.position.set(30, 50, 50); // 修改相机位置\r\n    camera.lookAt(new THREE.Vector3(0, 0, 0)); // 确保相机对准中心\r\n\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.shadowMap.enabled = true;\r\n\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.target.set(0, 10, 0);\r\n    controls.update();\r\n\r\n    // 添加环境光\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n    directionalLight.position.set(-10, 20, -10); // 设置更高或更正方向的光源\r\n    scene.add(directionalLight);\r\n\r\n\r\n    // 添加层次阴影映射\r\n    const csm = new CSM({\r\n      maxFar: 1000,\r\n      cascades: 4,\r\n      mode: \"practical\",\r\n      parent: scene,\r\n      shadowMapSize: 2048,\r\n      lightDirection: new THREE.Vector3(-1, -1, -1).normalize(),\r\n      lightColor: new THREE.Color(0x000020),\r\n      lightIntensity: 0.5,\r\n      camera,\r\n    });\r\n\r\n    // 添加平面\r\n    const planeGeometry = new THREE.PlaneGeometry(50, 50, 10, 10);\r\n    planeGeometry.rotateX(-Math.PI / 2);\r\n    const planeMaterial = new THREE.MeshPhongMaterial({ color: \"white\", side: THREE.DoubleSide });\r\n    const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n    csm.setupMaterial(planeMaterial);\r\n    plane.receiveShadow = true;\r\n    scene.add(plane);\r\n\r\n    // 创建树木\r\n    const builder = new TreeBuilder();\r\n    const customizeTree = new CustomizeTree();\r\n    let treeObj = customizeTree.getTree(\"普通乔木\");\r\n    builder.init(treeObj, true, \"y-axis\");\r\n    const skeleton = builder.buildSkeleton();\r\n    const singleTree = builder.buildTree(skeleton);\r\n\r\n    \r\n\r\n    singleTree.children.forEach((child) => {\r\n      child.castShadow = true;\r\n    });\r\n    // 构建树木并为其添加阴影\r\n    let lod1;\r\n  \r\n  singleTree.children.forEach((child) => {\r\n    child.castShadow = true; // 使每个树木部分都投射阴影\r\n  });\r\n  scene.add(singleTree); // 将树木添加到场景中\r\n\r\n  // 将树木构建的函数封装\r\n  function buildtree(species) {\r\n    scene.remove(singleTree);\r\n    scene.remove(lod1);\r\n    builder.clearMesh(); // 清空之前的网格\r\n    treeObj = customizeTree.getTree(species);\r\n    builder.init(treeObj, true);\r\n    skeleton = builder.buildSkeleton();\r\n    singleTree = builder.buildTree(skeleton);\r\n    singleTree.children.forEach((child) => {\r\n      child.castShadow = true; // 使每个树木部分都投射阴影\r\n    });\r\n    scene.add(singleTree); // 将新的树木添加到场景中\r\n\r\n    console.log(\"singleTree\",singleTree);\r\n\r\n    // 加载纹理并为树木创建叶子\r\n    let loader = new THREE.TextureLoader();\r\n    console.log(\"Texture path:\", `${treeObj.path}texture.png`);\r\n    let texture1 = loader.load(\r\n      `${treeObj.path}texture.png`,\r\n      () => {\r\n        console.log(\"Texture loaded:\", texture1);\r\n        console.log(\"Texture alpha values:\", texture1.image);\r\n      },\r\n      undefined,\r\n      (error) => {\r\n        console.error(\"Error loading texture:\", error);\r\n      }\r\n    );\r\n    texture1.colorSpace = THREE.SRGBColorSpace;\r\n    // 打印纹理对象\r\n    console.log(\"Texture:\", texture1);\r\n\r\n\r\n    let geometry = new LeafGeometry(\"cross\", 10, 10).generate(); // 生成叶子的几何体\r\n    // 打印几何体对象\r\n    console.log(\"Geometry:\", geometry);\r\n\r\n    // 创建材质\r\n    let material = new THREE.MeshBasicMaterial({\r\n      map: texture1, // 纹理贴图\r\n      side: THREE.DoubleSide, // 两面显示\r\n      alphaTest: 0.5, // 透明度测试\r\n    });\r\n    // 打印材质对象\r\n    console.log(\"Material:\", material);\r\n\r\n    lod1 = new THREE.Mesh(geometry, material);\r\n    lod1.position.set(20, 0, 0); // 设置叶子位置\r\n    lod1.castShadow = true; // 使叶子也投射阴影\r\n    scene.add(lod1); // 将叶子添加到场景中\r\n    // 打印创建的 Mesh 对象\r\n    console.log(\"Leaf Mesh:\", lod1);\r\n  }\r\n    scene.add(singleTree);\r\n\r\n    // 动画循环\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      controls.update();\r\n      csm.update();\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    // 清理函数\r\n    return () => {\r\n      renderer.dispose();\r\n      mountRef.current.removeChild(renderer.domElement);\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={mountRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n};\r\n\r\nexport default ThreeScene;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}