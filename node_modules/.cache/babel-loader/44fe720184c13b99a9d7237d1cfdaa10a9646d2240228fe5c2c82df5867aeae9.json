{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\21064\\\\Desktop\\\\frontend\\\\src\\\\ThreeScene.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { CSM } from \"three/examples/jsm/csm/CSM.js\";\nimport { TreeBuilder } from \"./TreeBuilder\"; // 替换为你的 TreeBuilder 路径\nimport { CustomizeTree } from \"./CustomizeTree\"; // 替换为你的 CustomizeTree 路径\nimport { LeafGeometry } from \"./leaf_flower_fruit/LeafGeometry\"; // 用于生成叶子的几何体\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // 初始化场景\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xffffff);\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\n    camera.position.set(30, 50, 50); // 修改相机位置\n    camera.lookAt(new THREE.Vector3(0, 0, 0)); // 确保相机对准中心\n\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    mountRef.current.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.target.set(0, 10, 0);\n    controls.update();\n\n    // 添加环境光\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(-10, 20, -10); // 设置更高或更正方向的光源\n    scene.add(directionalLight);\n\n    // 添加层次阴影映射\n    const csm = new CSM({\n      maxFar: 1000,\n      cascades: 4,\n      mode: \"practical\",\n      parent: scene,\n      shadowMapSize: 2048,\n      lightDirection: new THREE.Vector3(-1, -1, -1).normalize(),\n      lightColor: new THREE.Color(0x000020),\n      lightIntensity: 0.5,\n      camera\n    });\n\n    // 添加平面\n    const planeGeometry = new THREE.PlaneGeometry(50, 50, 10, 10);\n    planeGeometry.rotateX(-Math.PI / 2);\n    const planeMaterial = new THREE.MeshPhongMaterial({\n      color: \"white\",\n      side: THREE.DoubleSide\n    });\n    const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n    csm.setupMaterial(planeMaterial);\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    // 创建树木\n    const builder = new TreeBuilder();\n    const customizeTree = new CustomizeTree();\n    let treeObj = customizeTree.getTree(\"桂花\");\n    builder.init(treeObj, true, \"y-axis\");\n    let skeleton = builder.buildSkeleton();\n    let lod1;\n    let singleTree = builder.buildTree(skeleton);\n    singleTree.children.forEach(child => {\n      child.castShadow = true; // 使每个树木部分都投射阴影\n    });\n    function buildtree(species, position, name) {\n      // 清理同名树组\n      scene.children.forEach(child => {\n        if (child.name === name) {\n          scene.remove(child);\n        }\n      });\n      builder.clearMesh(); // 清空之前的网格\n      treeObj = customizeTree.getTree(species);\n      builder.init(treeObj, true);\n      skeleton = builder.buildSkeleton();\n      singleTree = builder.buildTree(skeleton);\n      singleTree.children.forEach(child => {\n        child.castShadow = true; // 使每个树木部分都投射阴影\n      });\n      let loader = new THREE.TextureLoader();\n      let texture1 = loader.load(`${treeObj.path}texture.png`);\n      texture1.colorSpace = THREE.SRGBColorSpace;\n      let geometry = new LeafGeometry(\"cross\", 10, 10).generate();\n      let material = new THREE.MeshBasicMaterial({\n        map: texture1,\n        side: THREE.DoubleSide,\n        alphaTest: 0.5\n      });\n      lod1 = new THREE.Mesh(geometry, material);\n      lod1.castShadow = true;\n      let treeGroup = new THREE.Group();\n      treeGroup.add(singleTree);\n      treeGroup.add(lod1);\n      treeGroup.position.copy(position); // 设置位置\n      treeGroup.name = name; // 设置唯一名称\n      scene.add(treeGroup);\n    }\n\n    // 创建第一棵树\n    const species = Array.from(customizeTree.indices.keys());\n    buildtree(species[0], new THREE.Vector3(10, 0, 10), \"普通乔木\");\n\n    // 创建第二棵树\n    buildtree(species[1], new THREE.Vector3(-10, 0, -10), \"桂花\");\n\n    // 动画循环\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      csm.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    let selectedObject = null;\n    const handleMouseDown = event => {\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children, true);\n      if (intersects.length > 0) {\n        selectedObject = intersects[0].object;\n\n        // 找到整个树组\n        while (selectedObject.parent && !(selectedObject.parent instanceof THREE.Scene)) {\n          selectedObject = selectedObject.parent;\n        }\n        if (selectedObject.name.startsWith(\"Tree\")) {\n          console.log(\"Selected object:\", selectedObject.name); // 调试信息\n          controls.enabled = false; // 禁用 OrbitControls\n        }\n      }\n    };\n    const handleMouseMove = event => {\n      if (selectedObject) {\n        mouse.x = event.clientX / window.innerWidth * 2 - 1;\n        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n        raycaster.setFromCamera(mouse, camera);\n        const intersects = raycaster.intersectObject(plane, true);\n        if (intersects.length > 0) {\n          selectedObject.position.copy(intersects[0].point); // 更新整个组的位置\n        }\n      }\n    };\n    const handleMouseUp = () => {\n      if (selectedObject) {\n        console.log(\"Released object:\", selectedObject.name); // 调试信息\n      }\n      selectedObject = null;\n      controls.enabled = true; // 启用 OrbitControls\n    };\n    window.addEventListener(\"mousedown\", handleMouseDown);\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"mouseup\", handleMouseUp);\n\n    // 清理函数\n    return () => {\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: \"100%\",\n      height: \"100vh\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 10\n  }, this);\n};\n_s(ThreeScene, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","CSM","TreeBuilder","CustomizeTree","LeafGeometry","jsxDEV","_jsxDEV","ThreeScene","_s","mountRef","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","lookAt","Vector3","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","current","appendChild","domElement","controls","target","update","directionalLight","DirectionalLight","add","csm","maxFar","cascades","mode","parent","shadowMapSize","lightDirection","normalize","lightColor","lightIntensity","planeGeometry","PlaneGeometry","rotateX","Math","PI","planeMaterial","MeshPhongMaterial","color","side","DoubleSide","plane","Mesh","setupMaterial","receiveShadow","builder","customizeTree","treeObj","getTree","init","skeleton","buildSkeleton","lod1","singleTree","buildTree","children","forEach","child","castShadow","buildtree","species","name","remove","clearMesh","loader","TextureLoader","texture1","load","path","colorSpace","SRGBColorSpace","geometry","generate","material","MeshBasicMaterial","map","alphaTest","treeGroup","Group","copy","Array","from","indices","keys","animate","requestAnimationFrame","render","raycaster","Raycaster","mouse","Vector2","selectedObject","handleMouseDown","event","x","clientX","y","clientY","setFromCamera","intersects","intersectObjects","length","object","startsWith","console","log","handleMouseMove","intersectObject","point","handleMouseUp","addEventListener","removeEventListener","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/21064/Desktop/frontend/src/ThreeScene.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\nimport { CSM } from \"three/examples/jsm/csm/CSM.js\";\r\nimport { TreeBuilder } from \"./TreeBuilder\"; // 替换为你的 TreeBuilder 路径\r\nimport { CustomizeTree } from \"./CustomizeTree\"; // 替换为你的 CustomizeTree 路径\r\nimport { LeafGeometry } from \"./leaf_flower_fruit/LeafGeometry\"; // 用于生成叶子的几何体\r\n\r\nconst ThreeScene = () => {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // 初始化场景\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xffffff);\r\n\r\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\r\n    camera.position.set(30, 50, 50); // 修改相机位置\r\n    camera.lookAt(new THREE.Vector3(0, 0, 0)); // 确保相机对准中心\r\n\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.shadowMap.enabled = true;\r\n\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.target.set(0, 10, 0);\r\n    controls.update();\r\n\r\n    // 添加环境光\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n    directionalLight.position.set(-10, 20, -10); // 设置更高或更正方向的光源\r\n    scene.add(directionalLight);\r\n\r\n\r\n    // 添加层次阴影映射\r\n    const csm = new CSM({\r\n      maxFar: 1000,\r\n      cascades: 4,\r\n      mode: \"practical\",\r\n      parent: scene,\r\n      shadowMapSize: 2048,\r\n      lightDirection: new THREE.Vector3(-1, -1, -1).normalize(),\r\n      lightColor: new THREE.Color(0x000020),\r\n      lightIntensity: 0.5,\r\n      camera,\r\n    });\r\n\r\n    // 添加平面\r\n    const planeGeometry = new THREE.PlaneGeometry(50, 50, 10, 10);\r\n    planeGeometry.rotateX(-Math.PI / 2);\r\n    const planeMaterial = new THREE.MeshPhongMaterial({ color: \"white\", side: THREE.DoubleSide });\r\n    const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n    csm.setupMaterial(planeMaterial);\r\n    plane.receiveShadow = true;\r\n    scene.add(plane);\r\n\r\n    // 创建树木\r\n    const builder = new TreeBuilder();\r\n    const customizeTree = new CustomizeTree();\r\n    let treeObj = customizeTree.getTree(\"桂花\");\r\n\r\n    builder.init(treeObj, true, \"y-axis\");\r\n    let skeleton = builder.buildSkeleton();\r\n\r\n    let lod1;\r\n    let singleTree = builder.buildTree(skeleton);\r\n    singleTree.children.forEach((child) => {\r\n      child.castShadow = true; // 使每个树木部分都投射阴影\r\n    });\r\n\r\n    function buildtree(species, position, name) {\r\n      // 清理同名树组\r\n      scene.children.forEach((child) => {\r\n        if (child.name === name) {\r\n          scene.remove(child);\r\n        }\r\n      });\r\n    \r\n      builder.clearMesh(); // 清空之前的网格\r\n      treeObj = customizeTree.getTree(species);\r\n      builder.init(treeObj, true);\r\n      skeleton = builder.buildSkeleton();\r\n      singleTree = builder.buildTree(skeleton);\r\n      singleTree.children.forEach((child) => {\r\n        child.castShadow = true; // 使每个树木部分都投射阴影\r\n      });\r\n    \r\n      let loader = new THREE.TextureLoader();\r\n      let texture1 = loader.load(`${treeObj.path}texture.png`);\r\n      texture1.colorSpace = THREE.SRGBColorSpace;\r\n    \r\n      let geometry = new LeafGeometry(\"cross\", 10, 10).generate();\r\n      let material = new THREE.MeshBasicMaterial({\r\n        map: texture1,\r\n        side: THREE.DoubleSide,\r\n        alphaTest: 0.5,\r\n      });\r\n    \r\n      lod1 = new THREE.Mesh(geometry, material);\r\n      lod1.castShadow = true;\r\n    \r\n      let treeGroup = new THREE.Group();\r\n      treeGroup.add(singleTree);\r\n      treeGroup.add(lod1);\r\n      treeGroup.position.copy(position); // 设置位置\r\n      treeGroup.name = name; // 设置唯一名称\r\n      scene.add(treeGroup);\r\n    }\r\n    \r\n\r\n    // 创建第一棵树\r\nconst species = Array.from(customizeTree.indices.keys());\r\nbuildtree(species[0], new THREE.Vector3(10, 0, 10), \"普通乔木\");\r\n\r\n// 创建第二棵树\r\nbuildtree(species[1], new THREE.Vector3(-10, 0, -10), \"桂花\");\r\n\r\n\r\n    // 动画循环\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      controls.update();\r\n      csm.update();\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    \r\n    const raycaster = new THREE.Raycaster();\r\n    const mouse = new THREE.Vector2();\r\n    let selectedObject = null;\r\n\r\n    const handleMouseDown = (event) => {\r\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n    \r\n      raycaster.setFromCamera(mouse, camera);\r\n    \r\n      const intersects = raycaster.intersectObjects(scene.children, true);\r\nif (intersects.length > 0) {\r\n  selectedObject = intersects[0].object;\r\n\r\n  // 找到整个树组\r\n  while (selectedObject.parent && !(selectedObject.parent instanceof THREE.Scene)) {\r\n    selectedObject = selectedObject.parent;\r\n  }\r\n\r\n  if (selectedObject.name.startsWith(\"Tree\")) {\r\n    console.log(\"Selected object:\", selectedObject.name); // 调试信息\r\n    controls.enabled = false; // 禁用 OrbitControls\r\n  }\r\n}\r\n\r\n    };\r\n    \r\n    const handleMouseMove = (event) => {\r\n      if (selectedObject) {\r\n        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n    \r\n        raycaster.setFromCamera(mouse, camera);\r\n    \r\n        const intersects = raycaster.intersectObject(plane, true);\r\n        if (intersects.length > 0) {\r\n          selectedObject.position.copy(intersects[0].point); // 更新整个组的位置\r\n        }\r\n      }\r\n    };\r\n    \r\n    const handleMouseUp = () => {\r\n      if (selectedObject) {\r\n        console.log(\"Released object:\", selectedObject.name); // 调试信息\r\n      }\r\n      selectedObject = null;\r\n      controls.enabled = true; // 启用 OrbitControls\r\n    };\r\n    \r\n\r\n    window.addEventListener(\"mousedown\", handleMouseDown);\r\n    window.addEventListener(\"mousemove\", handleMouseMove);\r\n    window.addEventListener(\"mouseup\", handleMouseUp);\r\n  \r\n    // 清理函数\r\n    return () => {\r\n      window.removeEventListener(\"mousedown\", handleMouseDown);\r\n      window.removeEventListener(\"mousemove\", handleMouseMove);\r\n      window.removeEventListener(\"mouseup\", handleMouseUp);\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={mountRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n};\r\n\r\nexport default ThreeScene;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}