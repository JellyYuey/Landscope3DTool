{"ast":null,"code":"import * as THREE from \"three\";\nconst randomRangeLinear = (min, max) => {\n  return Math.random() * (max - min) + min;\n};\nconst disturbedCurveNode = (start, end, disturb, gravity) => {\n  const mid = new THREE.Vector3().addVectors(start, end).multiplyScalar(0.5);\n  const d = start.distanceTo(end);\n  const l = d * disturb;\n  const g = d * gravity;\n  mid.add(new THREE.Vector3(Math.random() * 2 * l - l, Math.random() * 2 * l - l, Math.random() * 2 * l - l));\n  if (gravity) end.y -= g;\n  return [start, mid, end];\n};\nconst makeVector3 = vector => {\n  return new THREE.Vector3(vector.x, vector.y, vector.z);\n};\nconst makeVectors = positions => {\n  // positions 是长度一定能被3整除的数组\n  const vectors = [];\n  let l = positions.length;\n  for (let i = 0; i < l; i += 3) {\n    vectors.push(new THREE.Vector3().fromArray(positions, i));\n  }\n  return vectors;\n};\nconst drawLine = (skeleton, fatherLine, pointGroup) => {\n  const vectors = makeVectors(skeleton.positions);\n  const curve = new THREE.CatmullRomCurve3(vectors);\n  const points = curve.getPoints(10);\n  if (pointGroup) points.forEach(p => {\n    let toSeeP = toSeePoint(p);\n    pointGroup.add(toSeeP);\n  });\n  const geometry = new THREE.BufferGeometry().setFromPoints(points);\n  const material = new THREE.LineBasicMaterial({\n    color: \"red\"\n  });\n  const curveObject = new THREE.Line(geometry, material);\n  fatherLine.add(curveObject);\n  skeleton.children.forEach(child => {\n    drawLine(child, curveObject, pointGroup);\n  });\n};\nconst toSeePoint = (position, color) => {\n  const mesh = new THREE.Mesh(new THREE.SphereGeometry(2), new THREE.MeshBasicMaterial({\n    color: color\n  }));\n  mesh.position.copy(position);\n  return mesh;\n};\nconst lookAt = (obj, camera, controls) => {\n  const frameArea = (sizeToFitOnScreen, boxSize, boxCenter, camera) => {\n    const halfSizeToFitOnScreen = sizeToFitOnScreen * 0.5;\n    const halfFovY = THREE.MathUtils.degToRad(camera.fov * 0.5);\n    const distance = halfSizeToFitOnScreen / Math.tan(halfFovY);\n    const direction = new THREE.Vector3().subVectors(camera.position, boxCenter).multiply(new THREE.Vector3(1, 0, 1)).normalize();\n    // move the camera\n    camera.position.copy(direction.multiplyScalar(distance).add(boxCenter));\n    // pick some near and far values for the frustum that will contain the box.\n    camera.near = boxSize / 100;\n    camera.far = boxSize * 100;\n    camera.updateProjectionMatrix();\n    // point the camera to look at the center of the box\n    camera.lookAt(boxCenter.x, boxCenter.y, boxCenter.z);\n  };\n\n  // compute the box that contains all the stuff from root and below\n  const box = new THREE.Box3().setFromObject(obj);\n  const boxSize = box.getSize(new THREE.Vector3()).length();\n  const boxCenter = box.getCenter(new THREE.Vector3());\n  // set the camera to frame the box\n  frameArea(boxSize * 0.7, boxSize, boxCenter, camera);\n  // update the Trackball controls to handle the new size\n  controls.maxDistance = boxSize * 100;\n  controls.target.copy(boxCenter);\n  controls.update();\n};\nconst makeImposterTexture = (textureSize, obj) => {\n  const frameArea = (sizeToFitOnScreen, boxSize, boxCenter, camera) => {\n    const halfSizeToFitOnScreen = sizeToFitOnScreen * 0.5;\n    const halfFovY = THREE.MathUtils.degToRad(camera.fov * 0.5);\n    const distance = halfSizeToFitOnScreen / Math.tan(halfFovY);\n    camera.position.copy(boxCenter);\n    camera.position.z += distance;\n\n    // pick some near and far values for the frustum that\n    // will contain the box.\n    camera.near = boxSize / 100;\n    camera.far = boxSize * 100;\n    camera.updateProjectionMatrix();\n  };\n  const scene = new THREE.Scene();\n  const renderer = new THREE.WebGLRenderer();\n  const rt = new THREE.WebGLRenderTarget(textureSize, textureSize);\n  const aspect = 1; // because the render target is square\n  const fov = 75;\n  const near = 0.1;\n  const far = 1000;\n  const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n  const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n  scene.add(ambientLight);\n  scene.add(obj);\n\n  // compute the box that contains obj\n  const box = new THREE.Box3().setFromObject(obj);\n  const boxSize = box.getSize(new THREE.Vector3());\n  const boxCenter = box.getCenter(new THREE.Vector3());\n\n  // set the camera to frame the box\n  const fudge = 1.1;\n  const size = Math.max(...boxSize.toArray()) * fudge;\n  frameArea(size, size, boxCenter, camera);\n  renderer.autoClear = false;\n  renderer.setRenderTarget(rt);\n  renderer.render(scene, camera);\n  renderer.setRenderTarget(null);\n  renderer.autoClear = true;\n  scene.remove(obj);\n  return {\n    offset: boxCenter.multiplyScalar(fudge),\n    size: size,\n    texture: rt.texture\n  };\n};\nexport { randomRangeLinear, disturbedCurveNode, makeVector3, makeVectors, drawLine, lookAt, toSeePoint, makeImposterTexture };","map":{"version":3,"names":["THREE","randomRangeLinear","min","max","Math","random","disturbedCurveNode","start","end","disturb","gravity","mid","Vector3","addVectors","multiplyScalar","d","distanceTo","l","g","add","y","makeVector3","vector","x","z","makeVectors","positions","vectors","length","i","push","fromArray","drawLine","skeleton","fatherLine","pointGroup","curve","CatmullRomCurve3","points","getPoints","forEach","p","toSeeP","toSeePoint","geometry","BufferGeometry","setFromPoints","material","LineBasicMaterial","color","curveObject","Line","children","child","position","mesh","Mesh","SphereGeometry","MeshBasicMaterial","copy","lookAt","obj","camera","controls","frameArea","sizeToFitOnScreen","boxSize","boxCenter","halfSizeToFitOnScreen","halfFovY","MathUtils","degToRad","fov","distance","tan","direction","subVectors","multiply","normalize","near","far","updateProjectionMatrix","box","Box3","setFromObject","getSize","getCenter","maxDistance","target","update","makeImposterTexture","textureSize","scene","Scene","renderer","WebGLRenderer","rt","WebGLRenderTarget","aspect","PerspectiveCamera","ambientLight","AmbientLight","fudge","size","toArray","autoClear","setRenderTarget","render","remove","offset","texture"],"sources":["C:/Users/21064/Desktop/frontend/src/utilities.js"],"sourcesContent":["import * as THREE from \"three\";\n\nconst randomRangeLinear = (min, max) => {\n  return Math.random() * (max - min) + min;\n};\n\nconst disturbedCurveNode = (start, end, disturb, gravity) => {\n  const mid = new THREE.Vector3().addVectors(start, end).multiplyScalar(0.5);\n  const d = start.distanceTo(end);\n  const l = d * disturb;\n  const g = d * gravity;\n\n  mid.add(\n    new THREE.Vector3(\n      Math.random() * 2 * l - l,\n      Math.random() * 2 * l - l,\n      Math.random() * 2 * l - l,\n    ),\n  );\n  if (gravity) end.y -= g;\n\n  return [start, mid, end];\n};\n\nconst makeVector3 = (vector) => {\n  return new THREE.Vector3(vector.x, vector.y, vector.z);\n};\n\nconst makeVectors = (positions) => {\n  // positions 是长度一定能被3整除的数组\n  const vectors = [];\n  let l = positions.length;\n  for (let i = 0; i < l; i += 3) {\n    vectors.push(new THREE.Vector3().fromArray(positions, i));\n  }\n  return vectors;\n};\n\nconst drawLine = (skeleton, fatherLine, pointGroup) => {\n  const vectors = makeVectors(skeleton.positions);\n  const curve = new THREE.CatmullRomCurve3(vectors);\n  const points = curve.getPoints(10);\n  if (pointGroup)\n    points.forEach((p) => {\n      let toSeeP = toSeePoint(p);\n      pointGroup.add(toSeeP);\n    });\n  const geometry = new THREE.BufferGeometry().setFromPoints(points);\n  const material = new THREE.LineBasicMaterial({\n    color: \"red\",\n  });\n  const curveObject = new THREE.Line(geometry, material);\n  fatherLine.add(curveObject);\n  skeleton.children.forEach((child) => {\n    drawLine(child, curveObject, pointGroup);\n  });\n};\n\nconst toSeePoint = (position, color) => {\n  const mesh = new THREE.Mesh(\n    new THREE.SphereGeometry(2),\n    new THREE.MeshBasicMaterial({ color: color }),\n  );\n  mesh.position.copy(position);\n  return mesh;\n};\n\nconst lookAt = (obj, camera, controls) => {\n  const frameArea = (sizeToFitOnScreen, boxSize, boxCenter, camera) => {\n    const halfSizeToFitOnScreen = sizeToFitOnScreen * 0.5;\n    const halfFovY = THREE.MathUtils.degToRad(camera.fov * 0.5);\n    const distance = halfSizeToFitOnScreen / Math.tan(halfFovY);\n    const direction = new THREE.Vector3()\n      .subVectors(camera.position, boxCenter)\n      .multiply(new THREE.Vector3(1, 0, 1))\n      .normalize();\n    // move the camera\n    camera.position.copy(direction.multiplyScalar(distance).add(boxCenter));\n    // pick some near and far values for the frustum that will contain the box.\n    camera.near = boxSize / 100;\n    camera.far = boxSize * 100;\n    camera.updateProjectionMatrix();\n    // point the camera to look at the center of the box\n    camera.lookAt(boxCenter.x, boxCenter.y, boxCenter.z);\n  };\n\n  // compute the box that contains all the stuff from root and below\n  const box = new THREE.Box3().setFromObject(obj);\n  const boxSize = box.getSize(new THREE.Vector3()).length();\n  const boxCenter = box.getCenter(new THREE.Vector3());\n  // set the camera to frame the box\n  frameArea(boxSize * 0.7, boxSize, boxCenter, camera);\n  // update the Trackball controls to handle the new size\n  controls.maxDistance = boxSize * 100;\n  controls.target.copy(boxCenter);\n  controls.update();\n};\n\nconst makeImposterTexture = (textureSize, obj) => {\n  const frameArea = (sizeToFitOnScreen, boxSize, boxCenter, camera) => {\n    const halfSizeToFitOnScreen = sizeToFitOnScreen * 0.5;\n    const halfFovY = THREE.MathUtils.degToRad(camera.fov * 0.5);\n    const distance = halfSizeToFitOnScreen / Math.tan(halfFovY);\n\n    camera.position.copy(boxCenter);\n    camera.position.z += distance;\n\n    // pick some near and far values for the frustum that\n    // will contain the box.\n    camera.near = boxSize / 100;\n    camera.far = boxSize * 100;\n\n    camera.updateProjectionMatrix();\n  };\n  const scene = new THREE.Scene();\n  const renderer = new THREE.WebGLRenderer();\n  const rt = new THREE.WebGLRenderTarget(textureSize, textureSize);\n\n  const aspect = 1; // because the render target is square\n  const fov = 75;\n  const near = 0.1;\n  const far = 1000;\n  const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n\n  const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n  scene.add(ambientLight);\n  scene.add(obj);\n\n  // compute the box that contains obj\n  const box = new THREE.Box3().setFromObject(obj);\n\n  const boxSize = box.getSize(new THREE.Vector3());\n  const boxCenter = box.getCenter(new THREE.Vector3());\n\n  // set the camera to frame the box\n  const fudge = 1.1;\n  const size = Math.max(...boxSize.toArray()) * fudge;\n  frameArea(size, size, boxCenter, camera);\n\n  renderer.autoClear = false;\n  renderer.setRenderTarget(rt);\n  renderer.render(scene, camera);\n  renderer.setRenderTarget(null);\n  renderer.autoClear = true;\n\n  scene.remove(obj);\n\n  return {\n    offset: boxCenter.multiplyScalar(fudge),\n    size: size,\n    texture: rt.texture,\n  };\n};\n\nexport {\n  randomRangeLinear,\n  disturbedCurveNode,\n  makeVector3,\n  makeVectors,\n  drawLine,\n  lookAt,\n  toSeePoint,\n  makeImposterTexture,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}