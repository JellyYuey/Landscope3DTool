{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\21064\\\\Desktop\\\\frontend\\\\src\\\\ThreeScene.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { CSM } from \"three/examples/jsm/csm/CSM.js\";\nimport { CSMHelper } from \"three/examples/jsm/csm/CSMHelper.js\";\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min.js\";\nimport { TreeBuilder } from \"./TreeBuilder\"; // 替换为你的 TreeBuilder 路径\nimport { CustomizeTree } from \"./CustomizeTree\"; // 替换为你的 CustomizeTree 路径\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // 初始化场景\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xffffff);\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\n    camera.position.set(100, 70, 0);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    mountRef.current.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.target.set(0, 10, 0);\n    controls.update();\n\n    // 添加环境光\n    const amLight = new THREE.AmbientLight(0xffffff, 0.1);\n    scene.add(amLight);\n\n    // 添加层次阴影映射\n    const csm = new CSM({\n      maxFar: 1000,\n      cascades: 4,\n      mode: \"practical\",\n      parent: scene,\n      shadowMapSize: 2048,\n      lightDirection: new THREE.Vector3(-1, -1, -1).normalize(),\n      lightColor: new THREE.Color(0x000020),\n      lightIntensity: 0.5,\n      camera\n    });\n\n    // 添加平面\n    const planeGeometry = new THREE.PlaneGeometry(50, 50, 10, 10);\n    planeGeometry.rotateX(-Math.PI / 2);\n    const planeMaterial = new THREE.MeshPhongMaterial({\n      color: \"white\",\n      side: THREE.DoubleSide\n    });\n    const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n    csm.setupMaterial(planeMaterial);\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    // 创建树木\n    const builder = new TreeBuilder();\n    const customizeTree = new CustomizeTree();\n    let treeObj = customizeTree.getTree(\"普通乔木\");\n    builder.init(treeObj, true, \"y-axis\");\n    const skeleton = builder.buildSkeleton();\n    const singleTree = builder.buildTree(skeleton);\n    singleTree.children.forEach(child => {\n      child.castShadow = true;\n    });\n    scene.add(singleTree);\n\n    // 动画循环\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      csm.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // 清理函数\n    return () => {\n      renderer.dispose();\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: \"100%\",\n      height: \"100vh\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 10\n  }, this);\n};\n_s(ThreeScene, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","CSM","CSMHelper","GUI","TreeBuilder","CustomizeTree","jsxDEV","_jsxDEV","ThreeScene","_s","mountRef","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","current","appendChild","domElement","controls","target","update","amLight","AmbientLight","add","csm","maxFar","cascades","mode","parent","shadowMapSize","lightDirection","Vector3","normalize","lightColor","lightIntensity","planeGeometry","PlaneGeometry","rotateX","Math","PI","planeMaterial","MeshPhongMaterial","color","side","DoubleSide","plane","Mesh","setupMaterial","receiveShadow","builder","customizeTree","treeObj","getTree","init","skeleton","buildSkeleton","singleTree","buildTree","children","forEach","child","castShadow","animate","requestAnimationFrame","render","dispose","removeChild","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/21064/Desktop/frontend/src/ThreeScene.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\nimport { CSM } from \"three/examples/jsm/csm/CSM.js\";\r\nimport { CSMHelper } from \"three/examples/jsm/csm/CSMHelper.js\";\r\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min.js\";\r\nimport { TreeBuilder } from \"./TreeBuilder\"; // 替换为你的 TreeBuilder 路径\r\nimport { CustomizeTree } from \"./CustomizeTree\"; // 替换为你的 CustomizeTree 路径\r\n\r\nconst ThreeScene = () => {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // 初始化场景\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xffffff);\r\n\r\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\r\n    camera.position.set(100, 70, 0);\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.shadowMap.enabled = true;\r\n\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.target.set(0, 10, 0);\r\n    controls.update();\r\n\r\n    // 添加环境光\r\n    const amLight = new THREE.AmbientLight(0xffffff, 0.1);\r\n    scene.add(amLight);\r\n\r\n    // 添加层次阴影映射\r\n    const csm = new CSM({\r\n      maxFar: 1000,\r\n      cascades: 4,\r\n      mode: \"practical\",\r\n      parent: scene,\r\n      shadowMapSize: 2048,\r\n      lightDirection: new THREE.Vector3(-1, -1, -1).normalize(),\r\n      lightColor: new THREE.Color(0x000020),\r\n      lightIntensity: 0.5,\r\n      camera,\r\n    });\r\n\r\n    // 添加平面\r\n    const planeGeometry = new THREE.PlaneGeometry(50, 50, 10, 10);\r\n    planeGeometry.rotateX(-Math.PI / 2);\r\n    const planeMaterial = new THREE.MeshPhongMaterial({ color: \"white\", side: THREE.DoubleSide });\r\n    const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n    csm.setupMaterial(planeMaterial);\r\n    plane.receiveShadow = true;\r\n    scene.add(plane);\r\n\r\n    // 创建树木\r\n    const builder = new TreeBuilder();\r\n    const customizeTree = new CustomizeTree();\r\n    let treeObj = customizeTree.getTree(\"普通乔木\");\r\n    builder.init(treeObj, true, \"y-axis\");\r\n    const skeleton = builder.buildSkeleton();\r\n    const singleTree = builder.buildTree(skeleton);\r\n\r\n    singleTree.children.forEach((child) => {\r\n      child.castShadow = true;\r\n    });\r\n    scene.add(singleTree);\r\n\r\n    // 动画循环\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      controls.update();\r\n      csm.update();\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    // 清理函数\r\n    return () => {\r\n      renderer.dispose();\r\n      mountRef.current.removeChild(renderer.domElement);\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={mountRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n};\r\n\r\nexport default ThreeScene;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}