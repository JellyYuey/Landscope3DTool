{"ast":null,"code":"import { Vector3 } from './Vector3.js';\nclass Box3 {\n  constructor(min = new Vector3(+Infinity, +Infinity, +Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {\n    this.isBox3 = true;\n    this.min = min;\n    this.max = max;\n  }\n  set(min, max) {\n    this.min.copy(min);\n    this.max.copy(max);\n    return this;\n  }\n  setFromArray(array) {\n    this.makeEmpty();\n    for (let i = 0, il = array.length; i < il; i += 3) {\n      this.expandByPoint(_vector.fromArray(array, i));\n    }\n    return this;\n  }\n  setFromBufferAttribute(attribute) {\n    this.makeEmpty();\n    for (let i = 0, il = attribute.count; i < il; i++) {\n      this.expandByPoint(_vector.fromBufferAttribute(attribute, i));\n    }\n    return this;\n  }\n  setFromPoints(points) {\n    this.makeEmpty();\n    for (let i = 0, il = points.length; i < il; i++) {\n      this.expandByPoint(points[i]);\n    }\n    return this;\n  }\n  setFromCenterAndSize(center, size) {\n    const halfSize = _vector.copy(size).multiplyScalar(0.5);\n    this.min.copy(center).sub(halfSize);\n    this.max.copy(center).add(halfSize);\n    return this;\n  }\n  setFromObject(object, precise = false) {\n    this.makeEmpty();\n    return this.expandByObject(object, precise);\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n  copy(box) {\n    this.min.copy(box.min);\n    this.max.copy(box.max);\n    return this;\n  }\n  makeEmpty() {\n    this.min.x = this.min.y = this.min.z = +Infinity;\n    this.max.x = this.max.y = this.max.z = -Infinity;\n    return this;\n  }\n  isEmpty() {\n    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n  }\n  getCenter(target) {\n    return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n  }\n  getSize(target) {\n    return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n  }\n  expandByPoint(point) {\n    this.min.min(point);\n    this.max.max(point);\n    return this;\n  }\n  expandByVector(vector) {\n    this.min.sub(vector);\n    this.max.add(vector);\n    return this;\n  }\n  expandByScalar(scalar) {\n    this.min.addScalar(-scalar);\n    this.max.addScalar(scalar);\n    return this;\n  }\n  expandByObject(object, precise = false) {\n    // Computes the world-axis-aligned bounding box of an object (including its children),\n    // accounting for both the object's, and children's, world transforms\n\n    object.updateWorldMatrix(false, false);\n    const geometry = object.geometry;\n    if (geometry !== undefined) {\n      const positionAttribute = geometry.getAttribute('position');\n\n      // precise AABB computation based on vertex data requires at least a position attribute.\n      // instancing isn't supported so far and uses the normal (conservative) code path.\n\n      if (precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true) {\n        for (let i = 0, l = positionAttribute.count; i < l; i++) {\n          if (object.isMesh === true) {\n            object.getVertexPosition(i, _vector);\n          } else {\n            _vector.fromBufferAttribute(positionAttribute, i);\n          }\n          _vector.applyMatrix4(object.matrixWorld);\n          this.expandByPoint(_vector);\n        }\n      } else {\n        if (object.boundingBox !== undefined) {\n          // object-level bounding box\n\n          if (object.boundingBox === null) {\n            object.computeBoundingBox();\n          }\n          _box.copy(object.boundingBox);\n        } else {\n          // geometry-level bounding box\n\n          if (geometry.boundingBox === null) {\n            geometry.computeBoundingBox();\n          }\n          _box.copy(geometry.boundingBox);\n        }\n        _box.applyMatrix4(object.matrixWorld);\n        this.union(_box);\n      }\n    }\n    const children = object.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      this.expandByObject(children[i], precise);\n    }\n    return this;\n  }\n  containsPoint(point) {\n    return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;\n  }\n  containsBox(box) {\n    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n  }\n  getParameter(point, target) {\n    // This can potentially have a divide by zero if the box\n    // has a size dimension of 0.\n\n    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n  }\n  intersectsBox(box) {\n    // using 6 splitting planes to rule out intersections.\n    return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= this.max.z;\n  }\n  intersectsSphere(sphere) {\n    // Find the point on the AABB closest to the sphere center.\n    this.clampPoint(sphere.center, _vector);\n\n    // If that point is inside the sphere, the AABB and sphere intersect.\n    return _vector.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  }\n  intersectsPlane(plane) {\n    // We compute the minimum and maximum dot product values. If those values\n    // are on the same side (back or front) of the plane, then there is no intersection.\n\n    let min, max;\n    if (plane.normal.x > 0) {\n      min = plane.normal.x * this.min.x;\n      max = plane.normal.x * this.max.x;\n    } else {\n      min = plane.normal.x * this.max.x;\n      max = plane.normal.x * this.min.x;\n    }\n    if (plane.normal.y > 0) {\n      min += plane.normal.y * this.min.y;\n      max += plane.normal.y * this.max.y;\n    } else {\n      min += plane.normal.y * this.max.y;\n      max += plane.normal.y * this.min.y;\n    }\n    if (plane.normal.z > 0) {\n      min += plane.normal.z * this.min.z;\n      max += plane.normal.z * this.max.z;\n    } else {\n      min += plane.normal.z * this.max.z;\n      max += plane.normal.z * this.min.z;\n    }\n    return min <= -plane.constant && max >= -plane.constant;\n  }\n  intersectsTriangle(triangle) {\n    if (this.isEmpty()) {\n      return false;\n    }\n\n    // compute box center and extents\n    this.getCenter(_center);\n    _extents.subVectors(this.max, _center);\n\n    // translate triangle to aabb origin\n    _v0.subVectors(triangle.a, _center);\n    _v1.subVectors(triangle.b, _center);\n    _v2.subVectors(triangle.c, _center);\n\n    // compute edge vectors for triangle\n    _f0.subVectors(_v1, _v0);\n    _f1.subVectors(_v2, _v1);\n    _f2.subVectors(_v0, _v2);\n\n    // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n    // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n    // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n    let axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n    if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n      return false;\n    }\n\n    // test 3 face normals from the aabb\n    axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n      return false;\n    }\n\n    // finally testing the face normal of the triangle\n    // use already existing triangle edge vectors here\n    _triangleNormal.crossVectors(_f0, _f1);\n    axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n    return satForAxes(axes, _v0, _v1, _v2, _extents);\n  }\n  clampPoint(point, target) {\n    return target.copy(point).clamp(this.min, this.max);\n  }\n  distanceToPoint(point) {\n    return this.clampPoint(point, _vector).distanceTo(point);\n  }\n  getBoundingSphere(target) {\n    if (this.isEmpty()) {\n      target.makeEmpty();\n    } else {\n      this.getCenter(target.center);\n      target.radius = this.getSize(_vector).length() * 0.5;\n    }\n    return target;\n  }\n  intersect(box) {\n    this.min.max(box.min);\n    this.max.min(box.max);\n\n    // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n    if (this.isEmpty()) this.makeEmpty();\n    return this;\n  }\n  union(box) {\n    this.min.min(box.min);\n    this.max.max(box.max);\n    return this;\n  }\n  applyMatrix4(matrix) {\n    // transform of empty box is an empty box.\n    if (this.isEmpty()) return this;\n\n    // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n    _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n    _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n    _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n    _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n    _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n    _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n    _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n    _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n    this.setFromPoints(_points);\n    return this;\n  }\n  translate(offset) {\n    this.min.add(offset);\n    this.max.add(offset);\n    return this;\n  }\n  equals(box) {\n    return box.min.equals(this.min) && box.max.equals(this.max);\n  }\n}\nconst _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\nconst _vector = /*@__PURE__*/new Vector3();\nconst _box = /*@__PURE__*/new Box3();\n\n// triangle centered vertices\n\nconst _v0 = /*@__PURE__*/new Vector3();\nconst _v1 = /*@__PURE__*/new Vector3();\nconst _v2 = /*@__PURE__*/new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/new Vector3();\nconst _f1 = /*@__PURE__*/new Vector3();\nconst _f2 = /*@__PURE__*/new Vector3();\nconst _center = /*@__PURE__*/new Vector3();\nconst _extents = /*@__PURE__*/new Vector3();\nconst _triangleNormal = /*@__PURE__*/new Vector3();\nconst _testAxis = /*@__PURE__*/new Vector3();\nfunction satForAxes(axes, v0, v1, v2, extents) {\n  for (let i = 0, j = axes.length - 3; i <= j; i += 3) {\n    _testAxis.fromArray(axes, i);\n    // project the aabb onto the separating axis\n    const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);\n    // project all 3 vertices of the triangle onto the separating axis\n    const p0 = v0.dot(_testAxis);\n    const p1 = v1.dot(_testAxis);\n    const p2 = v2.dot(_testAxis);\n    // actual test, basically see if either of the most extreme of the triangle points intersects r\n    if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n      // points of the projected triangle are outside the projected half-length of the aabb\n      // the axis is separating and we can exit\n      return false;\n    }\n  }\n  return true;\n}\nexport { Box3 };","map":{"version":3,"names":["Vector3","Box3","constructor","min","Infinity","max","isBox3","set","copy","setFromArray","array","makeEmpty","i","il","length","expandByPoint","_vector","fromArray","setFromBufferAttribute","attribute","count","fromBufferAttribute","setFromPoints","points","setFromCenterAndSize","center","size","halfSize","multiplyScalar","sub","add","setFromObject","object","precise","expandByObject","clone","box","x","y","z","isEmpty","getCenter","target","addVectors","getSize","subVectors","point","expandByVector","vector","expandByScalar","scalar","addScalar","updateWorldMatrix","geometry","undefined","positionAttribute","getAttribute","isInstancedMesh","l","isMesh","getVertexPosition","applyMatrix4","matrixWorld","boundingBox","computeBoundingBox","_box","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","distanceToSquared","radius","intersectsPlane","plane","normal","constant","intersectsTriangle","triangle","_center","_extents","_v0","a","_v1","b","_v2","c","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","crossVectors","clamp","distanceToPoint","distanceTo","getBoundingSphere","intersect","matrix","_points","translate","offset","equals","_testAxis","v0","v1","v2","extents","j","r","Math","abs","p0","dot","p1","p2"],"sources":["C:/Users/21064/Desktop/frontend/node_modules/three/src/math/Box3.js"],"sourcesContent":["import { Vector3 } from './Vector3.js';\n\nclass Box3 {\n\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\tthis.isBox3 = true;\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromArray( array ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = array.length; i < il; i += 3 ) {\n\n\t\t\tthis.expandByPoint( _vector.fromArray( array, i ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( _vector.fromBufferAttribute( attribute, i ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object, precise = false ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object, precise );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\texpandByObject( object, precise = false ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\t\t// precise AABB computation based on vertex data requires at least a position attribute.\n\t\t\t// instancing isn't supported so far and uses the normal (conservative) code path.\n\n\t\t\tif ( precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true ) {\n\n\t\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tif ( object.isMesh === true ) {\n\n\t\t\t\t\t\tobject.getVertexPosition( i, _vector );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_vector.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_vector.applyMatrix4( object.matrixWorld );\n\t\t\t\t\tthis.expandByPoint( _vector );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( object.boundingBox !== undefined ) {\n\n\t\t\t\t\t// object-level bounding box\n\n\t\t\t\t\tif ( object.boundingBox === null ) {\n\n\t\t\t\t\t\tobject.computeBoundingBox();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_box.copy( object.boundingBox );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// geometry-level bounding box\n\n\t\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_box.copy( geometry.boundingBox );\n\n\t\t\t\t}\n\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ], precise );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x >= this.min.x && point.x <= this.max.x &&\n\t\t\tpoint.y >= this.min.y && point.y <= this.max.y &&\n\t\t\tpoint.z >= this.min.z && point.z <= this.max.z;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x >= this.min.x && box.min.x <= this.max.x &&\n\t\t\tbox.max.y >= this.min.y && box.min.y <= this.max.y &&\n\t\t\tbox.max.z >= this.min.z && box.min.z <= this.max.z;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0.subVectors( triangle.a, _center );\n\t\t_v1.subVectors( triangle.b, _center );\n\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1, _v0 );\n\t\t_f1.subVectors( _v2, _v1 );\n\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0, _v1, _v2, _extents );\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector ).distanceTo( point );\n\n\t}\n\n\tgetBoundingSphere( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\ttarget.makeEmpty();\n\n\t\t} else {\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector ).length() * 0.5;\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector = /*@__PURE__*/ new Vector3();\n\nconst _box = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the separating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the separating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is separating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nexport { Box3 };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}