{"ast":null,"code":"import * as THREE from \"three\";\nimport { mergeGeometries } from \"three/examples/jsm/utils/BufferGeometryUtils.js\";\n/*************************************************************************************\n * CLASS NAME:  Leaf\n * DESCRIPTION: Generate leaf mesh: folded or classic.\n * NOTE:\n *\n *************************************************************************************/\nclass LeafGeometry {\n  constructor(style, width, height, width_foldDegree = 0, height_foldDegree = 0, verticalAxis = \"y-axis\") {\n    this.style = style;\n    this.width = width;\n    this.height = height;\n    this.width_foldDegree = width_foldDegree;\n    this.height_foldDegree = height_foldDegree;\n    this.verticalAxis = verticalAxis;\n  }\n  generate() {\n    const {\n      style\n    } = this;\n    if (style === \"folded\") return this.generateFolded();else if (style === \"folded_reverse\") return this.generateFolded2();else if (style === \"classic\") return this.generateClassic();else if (style === \"tile\") return this.generateTile();else if (style === \"cross\") return this.generateCross();else if (style === \"cross_and_reverse\") return this.generateCross2();else if (style === \"surround\") return this.generateSurround();\n  }\n  generateFolded() {\n    const {\n      width,\n      height,\n      width_foldDegree,\n      height_foldDegree,\n      verticalAxis\n    } = this;\n    const geometry = new THREE.BufferGeometry();\n    let x = width / 2,\n      y = height,\n      z = width * width_foldDegree;\n    let add_z = height * height_foldDegree;\n    const vertices = [-x, 0, z, 0, 0, 0, x, 0, z, -x, y / 2, z, 0, y / 2, 0, x, y / 2, z, -x, y, z + add_z, 0, y, add_z, x, y, z + add_z];\n    const uvs = [0, 0, 0.5, 0, 1, 0, 0, 0.5, 0.5, 0.5, 1, 0.5, 0, 1, 0.5, 1, 1, 1];\n    const normals = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1];\n    const indices = [0, 1, 3, 4, 3, 1, 1, 2, 4, 5, 4, 2, 3, 4, 6, 7, 6, 4, 4, 5, 7, 8, 7, 5];\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array(vertices), 3));\n    geometry.setAttribute(\"normal\", new THREE.BufferAttribute(new Float32Array(normals), 3));\n    geometry.setAttribute(\"uv\", new THREE.BufferAttribute(new Float32Array(uvs), 2));\n    geometry.setIndex(indices);\n    // if (verticalAxis === \"z-axis\")\n    //   geometry.rotateX(Math.PI / 2).rotateZ(Math.PI / 2);\n    return geometry;\n  }\n  generateFolded2() {\n    return this.generateFolded().rotateZ(Math.PI).translate(0, this.height, 0);\n  }\n  generateClassic() {\n    const {\n      width,\n      height,\n      verticalAxis\n    } = this;\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [-1, -0.5, -1, 0, -0.5, -1, 1, -0.5, -1, -1, -0.5, 0, 0, 0, 0, 1, -0.5, 0, -1, -0.5, 1, 0, -0.5, 1, 1, -0.5, 1];\n    const uvs = [0, 1, 0.5, 1, 1, 1, 0, 0.5, 0.5, 0.5, 1, 0.5, 0, 0, 0.5, 0, 1, 0];\n    const normals = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1];\n    const indices = [0, 1, 3, 4, 3, 1, 1, 2, 4, 5, 4, 2, 3, 4, 6, 7, 6, 4, 4, 5, 7, 8, 7, 5];\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array(vertices), 3));\n    geometry.setAttribute(\"normal\", new THREE.BufferAttribute(new Float32Array(normals), 3));\n    geometry.setAttribute(\"uv\", new THREE.BufferAttribute(new Float32Array(uvs), 2));\n    geometry.setIndex(indices);\n    if (verticalAxis === \"z-axis\") geometry.rotateX(Math.PI / 2).rotateZ(Math.PI / 2);\n    return geometry;\n  }\n  generateCross() {\n    const {\n      width,\n      height,\n      verticalAxis\n    } = this;\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [-width / 2, 0, 0, width / 2, 0, 0, width / 2, height, 0, -width / 2, height, 0, 0, 0, -width / 2, 0, 0, width / 2, 0, height, width / 2, 0, height, -width / 2];\n    const uvs = [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1];\n    const normals = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0];\n    const indices = [0, 1, 2, 2, 3, 0, 4, 5, 6, 6, 7, 4];\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array(vertices), 3));\n    geometry.setAttribute(\"normal\", new THREE.BufferAttribute(new Float32Array(normals), 3));\n    geometry.setAttribute(\"uv\", new THREE.BufferAttribute(new Float32Array(uvs), 2));\n    geometry.setIndex(indices);\n    if (verticalAxis === \"z-axis\") geometry.rotateX(Math.PI / 2).rotateZ(Math.PI / 2);\n    return geometry;\n  }\n  generateCross2() {\n    return this.generateCross().rotateX(Math.PI).translate(0, this.height, 0);\n  }\n  generateTile() {\n    const points = [];\n    for (let i = 0; i < 10; i++) {\n      let x = i * Math.PI / 9;\n      points.push(new THREE.Vector3(x, Math.sin(x)));\n    }\n    const geometry = new THREE.LatheGeometry(points, 12, 0, Math.PI / 2);\n    if (this.verticalAxis === \"z-axis\") geometry.rotateX(Math.PI / 2).rotateZ(Math.PI / 2);\n    return geometry;\n  }\n  generateSurround() {\n    const geometries = [];\n    for (let i = 0; i < 3; i++) {\n      let eachgeometry = this.generateClassic().rotateX(Math.PI / 3).translate(0, 0, -0.1).rotateY(i * Math.PI / 2).translate(0, i / 10, 0);\n      geometries.push(eachgeometry);\n    }\n    return mergeGeometries(geometries, false);\n  }\n}\nexport { LeafGeometry };","map":{"version":3,"names":["THREE","mergeGeometries","LeafGeometry","constructor","style","width","height","width_foldDegree","height_foldDegree","verticalAxis","generate","generateFolded","generateFolded2","generateClassic","generateTile","generateCross","generateCross2","generateSurround","geometry","BufferGeometry","x","y","z","add_z","vertices","uvs","normals","indices","setAttribute","BufferAttribute","Float32Array","setIndex","rotateZ","Math","PI","translate","rotateX","points","i","push","Vector3","sin","LatheGeometry","geometries","eachgeometry","rotateY"],"sources":["C:/Users/21064/Desktop/frontend/src/leaf_flower_fruit/LeafGeometry.js"],"sourcesContent":["import * as THREE from \"three\";\nimport { mergeGeometries } from \"three/examples/jsm/utils/BufferGeometryUtils.js\";\n/*************************************************************************************\n * CLASS NAME:  Leaf\n * DESCRIPTION: Generate leaf mesh: folded or classic.\n * NOTE:\n *\n *************************************************************************************/\nclass LeafGeometry {\n  constructor(\n    style,\n    width,\n    height,\n    width_foldDegree = 0,\n    height_foldDegree = 0,\n    verticalAxis = \"y-axis\"\n  ) {\n    this.style = style;\n    this.width = width;\n    this.height = height;\n    this.width_foldDegree = width_foldDegree;\n    this.height_foldDegree = height_foldDegree;\n    this.verticalAxis = verticalAxis;\n  }\n\n  generate() {\n    const { style } = this;\n    if (style === \"folded\") return this.generateFolded();\n    else if (style === \"folded_reverse\") return this.generateFolded2();\n    else if (style === \"classic\") return this.generateClassic();\n    else if (style === \"tile\") return this.generateTile();\n    else if (style === \"cross\") return this.generateCross();\n    else if (style === \"cross_and_reverse\") return this.generateCross2();\n    else if (style === \"surround\") return this.generateSurround();\n  }\n\n  generateFolded() {\n    const { width, height, width_foldDegree, height_foldDegree, verticalAxis } =\n      this;\n    const geometry = new THREE.BufferGeometry();\n    let x = width / 2,\n      y = height,\n      z = width * width_foldDegree;\n    let add_z = height * height_foldDegree;\n    const vertices = [\n      -x,\n      0,\n      z,\n      0,\n      0,\n      0,\n      x,\n      0,\n      z,\n      -x,\n      y / 2,\n      z,\n      0,\n      y / 2,\n      0,\n      x,\n      y / 2,\n      z,\n      -x,\n      y,\n      z + add_z,\n      0,\n      y,\n      add_z,\n      x,\n      y,\n      z + add_z,\n    ];\n    const uvs = [\n      0, 0, 0.5, 0, 1, 0, 0, 0.5, 0.5, 0.5, 1, 0.5, 0, 1, 0.5, 1, 1, 1,\n    ];\n    const normals = [\n      0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,\n      0, 1,\n    ];\n    const indices = [\n      0, 1, 3, 4, 3, 1, 1, 2, 4, 5, 4, 2, 3, 4, 6, 7, 6, 4, 4, 5, 7, 8, 7, 5,\n    ];\n    geometry.setAttribute(\n      \"position\",\n      new THREE.BufferAttribute(new Float32Array(vertices), 3)\n    );\n    geometry.setAttribute(\n      \"normal\",\n      new THREE.BufferAttribute(new Float32Array(normals), 3)\n    );\n    geometry.setAttribute(\n      \"uv\",\n      new THREE.BufferAttribute(new Float32Array(uvs), 2)\n    );\n    geometry.setIndex(indices);\n    // if (verticalAxis === \"z-axis\")\n    //   geometry.rotateX(Math.PI / 2).rotateZ(Math.PI / 2);\n    return geometry;\n  }\n\n  generateFolded2() {\n    return this.generateFolded().rotateZ(Math.PI).translate(0, this.height, 0);\n  }\n\n  generateClassic() {\n    const { width, height, verticalAxis } = this;\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [\n      -1, -0.5, -1, 0, -0.5, -1, 1, -0.5, -1, -1, -0.5, 0, 0, 0, 0, 1, -0.5, 0,\n      -1, -0.5, 1, 0, -0.5, 1, 1, -0.5, 1,\n    ];\n    const uvs = [\n      0, 1, 0.5, 1, 1, 1, 0, 0.5, 0.5, 0.5, 1, 0.5, 0, 0, 0.5, 0, 1, 0,\n    ];\n    const normals = [\n      0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,\n      0, 1,\n    ];\n    const indices = [\n      0, 1, 3, 4, 3, 1, 1, 2, 4, 5, 4, 2, 3, 4, 6, 7, 6, 4, 4, 5, 7, 8, 7, 5,\n    ];\n    geometry.setAttribute(\n      \"position\",\n      new THREE.BufferAttribute(new Float32Array(vertices), 3)\n    );\n    geometry.setAttribute(\n      \"normal\",\n      new THREE.BufferAttribute(new Float32Array(normals), 3)\n    );\n    geometry.setAttribute(\n      \"uv\",\n      new THREE.BufferAttribute(new Float32Array(uvs), 2)\n    );\n    geometry.setIndex(indices);\n    if (verticalAxis === \"z-axis\")\n      geometry.rotateX(Math.PI / 2).rotateZ(Math.PI / 2);\n    return geometry;\n  }\n\n  generateCross() {\n    const { width, height, verticalAxis } = this;\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [\n      -width / 2,\n      0,\n      0,\n      width / 2,\n      0,\n      0,\n      width / 2,\n      height,\n      0,\n      -width / 2,\n      height,\n      0,\n      0,\n      0,\n      -width / 2,\n      0,\n      0,\n      width / 2,\n      0,\n      height,\n      width / 2,\n      0,\n      height,\n      -width / 2,\n    ];\n    const uvs = [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1];\n    const normals = [\n      0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,\n      0,\n    ];\n    const indices = [0, 1, 2, 2, 3, 0, 4, 5, 6, 6, 7, 4];\n    geometry.setAttribute(\n      \"position\",\n      new THREE.BufferAttribute(new Float32Array(vertices), 3)\n    );\n    geometry.setAttribute(\n      \"normal\",\n      new THREE.BufferAttribute(new Float32Array(normals), 3)\n    );\n    geometry.setAttribute(\n      \"uv\",\n      new THREE.BufferAttribute(new Float32Array(uvs), 2)\n    );\n    geometry.setIndex(indices);\n    if (verticalAxis === \"z-axis\")\n      geometry.rotateX(Math.PI / 2).rotateZ(Math.PI / 2);\n    return geometry;\n  }\n\n  generateCross2() {\n    return this.generateCross().rotateX(Math.PI).translate(0, this.height, 0);\n  }\n\n  generateTile() {\n    const points = [];\n    for (let i = 0; i < 10; i++) {\n      let x = (i * Math.PI) / 9;\n      points.push(new THREE.Vector3(x, Math.sin(x)));\n    }\n    const geometry = new THREE.LatheGeometry(points, 12, 0, Math.PI / 2);\n    if (this.verticalAxis === \"z-axis\")\n      geometry.rotateX(Math.PI / 2).rotateZ(Math.PI / 2);\n    return geometry;\n  }\n\n  generateSurround() {\n    const geometries = [];\n    for (let i = 0; i < 3; i++) {\n      let eachgeometry = this.generateClassic()\n        .rotateX(Math.PI / 3)\n        .translate(0, 0, -0.1)\n        .rotateY((i * Math.PI) / 2)\n        .translate(0, i / 10, 0);\n      geometries.push(eachgeometry);\n    }\n    return mergeGeometries(geometries, false);\n  }\n}\n\nexport { LeafGeometry };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}