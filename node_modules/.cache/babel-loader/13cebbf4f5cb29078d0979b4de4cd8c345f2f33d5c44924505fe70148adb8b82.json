{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\21064\\\\Desktop\\\\frontend\\\\src\\\\ThreeScene.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  const mountRef = useRef(null); // 挂载点引用\n  const sceneRef = useRef(null); // 场景引用\n  const cameraRef = useRef(null); // 相机引用\n  const rendererRef = useRef(null); // 渲染器引用\n  const [objects, setObjects] = useState([]); // 场景中的物体\n\n  // 初始化场景\n  useEffect(() => {\n    // 创建场景、相机、渲染器\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xa0a0a0);\n    sceneRef.current = scene;\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(10, 10, 20);\n    cameraRef.current = camera;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    rendererRef.current = renderer;\n    mountRef.current.appendChild(renderer.domElement);\n\n    // 添加光源\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(10, 20, 10);\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n\n    // 添加地面\n    const planeGeometry = new THREE.PlaneGeometry(100, 100);\n    const planeMaterial = new THREE.MeshStandardMaterial({\n      color: 0x808080\n    });\n    const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n    plane.rotation.x = -Math.PI / 2;\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    // 初始化轨道控制器\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n\n    // 动画循环\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // 清理函数\n    return () => {\n      renderer.dispose();\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  // 响应 objects 状态变化，重新渲染场景\n  useEffect(() => {\n    const renderer = rendererRef.current;\n    const scene = sceneRef.current;\n    const camera = cameraRef.current;\n    if (renderer && scene && camera) {\n      renderer.render(scene, camera);\n    }\n  }, [objects]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: \"100%\",\n        height: \"100vh\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          const boxGeometry = new THREE.BoxGeometry(2, 2, 2);\n          const boxMaterial = new THREE.MeshStandardMaterial({\n            color: Math.random() * 0xffffff\n          });\n          const box = new THREE.Mesh(boxGeometry, boxMaterial);\n          box.position.set(Math.random() * 10 - 5, 1, Math.random() * 10 - 5);\n          box.castShadow = true;\n          sceneRef.current.add(box); // 添加到场景\n          setObjects(prev => [...prev, box]); // 更新状态\n        },\n        children: \"\\u6DFB\\u52A0\\u7269\\u4F53\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          if (objects.length > 0) {\n            const objectToRemove = objects.pop();\n            sceneRef.current.remove(objectToRemove); // 从场景中移除\n            objectToRemove.geometry.dispose();\n            objectToRemove.material.dispose();\n            setObjects([...objects]); // 更新状态\n          }\n        },\n        children: \"\\u5220\\u9664\\u7269\\u4F53\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(ThreeScene, \"nj8milZO7xGza4W5K0c97tg8JkU=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","OrbitControls","jsxDEV","_jsxDEV","ThreeScene","_s","mountRef","sceneRef","cameraRef","rendererRef","objects","setObjects","scene","Scene","background","Color","current","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","castShadow","planeGeometry","PlaneGeometry","planeMaterial","MeshStandardMaterial","color","plane","Mesh","rotation","x","Math","PI","receiveShadow","controls","enableDamping","animate","requestAnimationFrame","update","render","dispose","removeChild","children","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","top","left","onClick","boxGeometry","BoxGeometry","boxMaterial","random","box","prev","length","objectToRemove","pop","remove","geometry","material","_c","$RefreshReg$"],"sources":["C:/Users/21064/Desktop/frontend/src/ThreeScene.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nconst ThreeScene = () => {\r\n  const mountRef = useRef(null); // 挂载点引用\r\n  const sceneRef = useRef(null); // 场景引用\r\n  const cameraRef = useRef(null); // 相机引用\r\n  const rendererRef = useRef(null); // 渲染器引用\r\n  const [objects, setObjects] = useState([]); // 场景中的物体\r\n\r\n  // 初始化场景\r\n  useEffect(() => {\r\n    // 创建场景、相机、渲染器\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xa0a0a0);\r\n    sceneRef.current = scene;\r\n\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    camera.position.set(10, 10, 20);\r\n    cameraRef.current = camera;\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.shadowMap.enabled = true;\r\n    rendererRef.current = renderer;\r\n\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    // 添加光源\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(10, 20, 10);\r\n    directionalLight.castShadow = true;\r\n    scene.add(directionalLight);\r\n\r\n    // 添加地面\r\n    const planeGeometry = new THREE.PlaneGeometry(100, 100);\r\n    const planeMaterial = new THREE.MeshStandardMaterial({ color: 0x808080 });\r\n    const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n    plane.rotation.x = -Math.PI / 2;\r\n    plane.receiveShadow = true;\r\n    scene.add(plane);\r\n\r\n    // 初始化轨道控制器\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n\r\n    // 动画循环\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    // 清理函数\r\n    return () => {\r\n      renderer.dispose();\r\n      mountRef.current.removeChild(renderer.domElement);\r\n    };\r\n  }, []);\r\n\r\n  // 响应 objects 状态变化，重新渲染场景\r\n  useEffect(() => {\r\n    const renderer = rendererRef.current;\r\n    const scene = sceneRef.current;\r\n    const camera = cameraRef.current;\r\n\r\n    if (renderer && scene && camera) {\r\n      renderer.render(scene, camera);\r\n    }\r\n  }, [objects]);\r\n\r\n  return (\r\n    <div>\r\n      <div ref={mountRef} style={{ width: \"100%\", height: \"100vh\" }} />\r\n      <div style={{ position: \"absolute\", top: 10, left: 10 }}>\r\n        <button\r\n          onClick={() => {\r\n            const boxGeometry = new THREE.BoxGeometry(2, 2, 2);\r\n            const boxMaterial = new THREE.MeshStandardMaterial({ color: Math.random() * 0xffffff });\r\n            const box = new THREE.Mesh(boxGeometry, boxMaterial);\r\n            box.position.set(Math.random() * 10 - 5, 1, Math.random() * 10 - 5);\r\n            box.castShadow = true;\r\n\r\n            sceneRef.current.add(box); // 添加到场景\r\n            setObjects((prev) => [...prev, box]); // 更新状态\r\n          }}\r\n        >\r\n          添加物体\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            if (objects.length > 0) {\r\n              const objectToRemove = objects.pop();\r\n              sceneRef.current.remove(objectToRemove); // 从场景中移除\r\n              objectToRemove.geometry.dispose();\r\n              objectToRemove.material.dispose();\r\n              setObjects([...objects]); // 更新状态\r\n            }\r\n          }}\r\n        >\r\n          删除物体\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThreeScene;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}